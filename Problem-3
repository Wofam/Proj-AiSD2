#Problem 3
import random


# klasa plaszczaka przechowywuje ilosc energii i urlopy
class Plaszczak():
    count = 0
    def __init__(self, a, tab):
        Plaszczak.count += 1
        self.id = Plaszczak.count-1
        self.energia = a
        self.wolne = tab
        self.counterWolne = 0
    def __str__(self):
        return f"ID#{self.id} | energia = {self.energia} | dni wolne={self.wolne}"


# klasa kolejki priorytetowej
class KolejkaPrio(object):

    # inicjalizacja
    def __init__(self):
        self.queue = []

    # funkcja "toString"
    def __str__(self):
        return ' '.join([str(i) for i in self.queue])

    # sprawdzenie czy pusta jest kolejka
    def isEmpty(self):
        try:
            return len(self.queue) == 0
        except IndexError:
            print()
            exit()

    # dodanie elementu
    def insert(self, data):
        try:
            self.queue.append(data)
        except IndexError:
            print()
            exit()

    # odczytanie indexu maksymalniej wartosci (dlugosc tabeli)
    def getLen(self):
        try:
            return len(self.queue)
        except IndexError:
            print()
            exit()

    # odczytanie maksymalnej wartosci
    def getTopValue(self, day):
        try:
            max_value = -1
            max_index = -1
            for i in range(len(self.queue)):

                if day in self.queue[i].wolne:
                    pass
                else:
                    #print(self.queue[i].energia,">",max_value)
                    if self.queue[i].energia > max_value:
                        max_value = self.queue[i].energia
                        max_index = i
                        #print("max value = ",max_value," max index = ",max_index)
            if max_value == -1:
                return False
            else:
                self.queue[max_index].wolne = self.queue[max_index].wolne + [day+1, day+2, day+3, day+4, day+5, day+6, day+7]
                return self.queue[max_index]

        except IndexError:
            print()
            exit()

    # usuwanie elementu
    def deleteTopValue(self):
        try:
            max_val = 0
            for i in range(len(self.queue)):
                if self.queue[i].energia > self.queue[max_val].energia:
                    max_val = i
            item = self.queue[max_val]
            del self.queue[max_val]
            return item
        except IndexError:
            print()
            exit()

    def getByIndex(self, index):
        item = self.queue[i]
        return item

    def deleteIndex(self, index):
        try:
            for i in range(index, len(self.queue)):
                self.queue[i-1] = self.queue[i]
            del self.queue[len(self.queue)]
        except IndexError:
            print()
            exit()



# sprawdzenie ile razy musi sie zatrzymac
def minStops(jasnosc, maksBezStopu):
    n = len(jasnosc) # ilosc punktow orientacyjnych

    melodia = 0 # ilosc wysluchania meloddi
    punktyMelodia = []
    trasa = []
    i = 0

    # i od 0 do konca plotu
    while i < n:
        # jesli plaszczak nie moze wrocic do punktu 0, czyt. dalej jest w trasie
        if i+maksBezStopu<n:
            # j od aktualnego punktu do maks przejscia bez stopu
            for j in range(i+maksBezStopu, i-1, -1):
                # istnieje sciezka bez tracenia energii
                if jasnosc[j] > jasnosc[i]:
                    i=j
                    trasa.append(i)
                    break

                #  nie istnieje sciezka bez tracenia energii
                elif j == i:
                    i = i + maksBezStopu
                    melodia = melodia + 1
                    trasa.append(i)
                    punktyMelodia.append(i)
                    break

        # jesli plaszczak moze wrocic do punktu 0
        else:
            if jasnosc[0] >= jasnosc[i]:
                break
            else:
                melodia = melodia+1
                punktyMelodia.append(0)
                break

    print("\nOptymalna trasa = [ ", end='')
    for i in range(len(trasa)-1):
        print(trasa[i]," ", end='')
    print(trasa[len(trasa)-1],"]", end='')
    print(" | Liczba odsluchan melodii:", melodia," w [ ", end='')
    for i in range(len(punktyMelodia)-1):
        print(punktyMelodia[i]," ", end='')
    print(punktyMelodia[len(punktyMelodia)-1],"]\n")
    # zwraca ile razy straznik musial posluchac melodii (odpoczac)
    return melodia

# main
kolejka = KolejkaPrio()
print("Wybierz opcje:\n\t1. Gotowe dane\n\t2. Losowe dane")
x = int(input())

match x:
    case (1):
    ### Przykladowe dane
        kolejka.insert(Plaszczak(5,[1,2,3,4]))
        kolejka.insert(Plaszczak(4,[5,7]))
        kolejka.insert(Plaszczak(3,[1,2,3]))
        kolejka.insert(Plaszczak(6,[2,3,4]))
        kolejka.insert(Plaszczak(0,[2,3,4,5,6,7]))
        kolejka.insert(Plaszczak(5,[1,5,6]))
        kolejka.insert(Plaszczak(4,[7]))
        jasnoscPunktow = [5, 10, 1, 7, 4, 1, 13, 12, 11, 7, 5, 3, 2, 1, 0, 12, 5, 65, -2, -2, -2, -2, 4]
        maksBezStopu = 2

    ### Tworzenie losowych danych
    case (2):
        maksBezStopu = random.randrange(1,5,1)
        liczbaPlaszczakow = random.randrange(4,10,1)

        for i in range(liczbaPlaszczakow):
            dniWolne = random.randrange(0,6,1)
            kolejka.insert(Plaszczak(random.randrange(1,20,1),random.sample(range(1,14),dniWolne)))

        liczbaPunktow = random.randrange(2,30,1)
        jasnoscPunktow = []
        for i in range(liczbaPunktow):
            jasnoscPunktow.append(random.randrange(1,100,1))


# wypisanie wartosci jasnosci punktow orientacyjnych
print("\nMaks bez stopu = ",maksBezStopu ,"\nPlot: [", end='')
for i in range(len(jasnoscPunktow)-1):
    print(jasnoscPunktow[i],", ", end='')
print(jasnoscPunktow[len(jasnoscPunktow)-1],"]", end='')

if maksBezStopu >= len(jasnoscPunktow):
    print("Sciezka nie wymaga zatrzyman")
else:
    minStops(jasnoscPunktow, maksBezStopu)
# wypisanie straznikow

for i in range(kolejka.getLen()):
    print(kolejka.getByIndex(i))
print("\n",end='')

# wybieranie straznika na dany dzien
for i in range(2):
    print("Tydzien ",i+1 ," ma grafik: [", end = '')
    for j in range(7):
        # dany straznik ma urlop
        if kolejka.getTopValue(i*7+j+1) == False:
            print( "(brak stranzika do pracy w", j+1, ")", end='' )
        else:
            print( f" id#{kolejka.getTopValue(i*7+j+1).id} ", end='' )
    print("]")

